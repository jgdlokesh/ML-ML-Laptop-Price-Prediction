# -*- coding: utf-8 -*-
"""Laptop_Price_Prediction_for_SmartTech_Co.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15pSYxtIq-FM_dJ2nXGAHyQilFL-Huesp
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

data= pd.read_csv('/content/laptop.csv')
pd.DataFrame(data)

# Removing NaN values from Dataset
data.replace('NaN', np.nan, inplace=True)
df = data.dropna()
df.isnull().sum()

df = pd.get_dummies(df)
x= df.drop(['Price'], axis=1)
y= df['Price']

"""Linear Regression"""

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)
model= LinearRegression()
model.fit(x_train, y_train)
y_pred= model.predict(x_test)
mse= mean_squared_error(y_test, y_pred)

sample_laptop = [[0] * len(x.columns)]
predicted_price = model.predict(sample_laptop)
print('Mean Squared Error: ',mse)
print("Predicted price for the sample laptop:", predicted_price[0])

"""Random Forest Regression"""

# Import Random Forest Regressor
from sklearn.ensemble import RandomForestRegressor

# Initialize Random Forest model
rf_model = RandomForestRegressor()

# Train the Random Forest model
rf_model.fit(x_train, y_train)

# Make predictions using Random Forest model
y_pred_rf = rf_model.predict(x_test)

# Evaluate the Random Forest model
mse_rf = mean_squared_error(y_test, y_pred_rf)
print("Mean Squared Error (Random Forest):", mse_rf)

# Sample prediction for a new laptop using Random Forest model
predicted_price_rf = rf_model.predict(sample_laptop)
print("Predicted price for sample laptop using Random Forest:", predicted_price_rf[0])

"""Gradient Boosting Regression"""

# Import Gradient Boosting Regressor
from sklearn.ensemble import GradientBoostingRegressor

# Initialize Gradient Boosting model
gb_model = GradientBoostingRegressor()

# Train the Gradient Boosting model
gb_model.fit(x_train, y_train)

# Make predictions using Gradient Boosting model
y_pred_gb = gb_model.predict(x_test)

# Evaluate the Gradient Boosting model
mse_gb = mean_squared_error(y_test, y_pred_gb)
print("Mean Squared Error (Gradient Boosting):", mse_gb)

# Sample prediction for a new laptop using Gradient Boosting model
predicted_price_gb = gb_model.predict(sample_laptop)
print("Predicted price for sample laptop using Gradient Boosting:", predicted_price_gb[0])

import joblib

# Serialize the trained model
joblib.dump(gb_model, 'gb_model.pkl')
gb_model = joblib.load('gb_model.pkl')
redicted_price_gb = gb_model.predict(sample_laptop)
print("Predicted price for sample laptop using Gradient Boosting:", predicted_price_gb[0])